name: Executable

on:
  release:
    types: [created]

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  PRODUCT_BASENAME: forskscope
  TAG: ${{ github.ref_name }}            # tag or branch name
  JOB_WORKDIR: tmp-${{ github.run_id }}  # unique number

jobs:
  build:
    runs-on: ${{ matrix.os }}

    outputs:
      linux_asset_sha256: ${{ steps.linux_asset.outputs.linux_asset_sha256 }}
    
    strategy:
      matrix:
        include:
          - name: Linux-x64-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            bin_ext: 
            archive_ext: .tar.gz
          - name: macOS-aarch64
            target: aarch64-apple-darwin
            os: macos-latest
            bin_ext: 
            archive_ext: .zip
          - name: Windows-x64
            target: x86_64-pc-windows-msvc
            os: windows-latest
            bin_ext: .exe
            archive_ext: .zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # [ tauri build preparation ]
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install Node.js packages
        run: npm install
      - name: Install tauri requirements on Linux
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      # [ build ]
      - name: Install Rust
        run: bash .github/workflows/scripts/install-rust.sh stable ${{ matrix.target }}
      
      - name: Cache Tauri dependencies and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            node_modules
          key: ${{ runner.os }}-tauri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-tauri-

      - name: Build Rust executable
        run: |
          env NO_STRIP=1 npm run tauri build --locked -- --target ${{ matrix.target }}

      # [ release asset ]
      - name: Prepare for release asset
        run: |
          BUILT_FILEPATH=src-tauri/target/${{ matrix.target }}/release/${{ env.PRODUCT_BASENAME }}${{ matrix.bin_ext }}
          RELEASE_ASSET_BASENAME=${{ env.PRODUCT_BASENAME }}@${{ matrix.name }}-${{ env.TAG }}
          RELEASE_SRC_DIR=${RELEASE_ASSET_BASENAME}
          RELEASE_ASSET_FILENAME=${RELEASE_ASSET_BASENAME}${{ matrix.archive_ext }}
          mkdir -p "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}"
          mv "${BUILT_FILEPATH}" "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}/"
          echo "RELEASE_SRC_DIR=${RELEASE_SRC_DIR}" >> $GITHUB_ENV
          echo "RELEASE_ASSET_FILENAME=${RELEASE_ASSET_FILENAME}" >> $GITHUB_ENV
      
      # BSD tar on macOS: first 8MB of the file are sometimes all NUL byte
      # refs: https://github.com/actions/cache/issues/403 , https://github.com/rust-lang/cargo/issues/8603
      - name: Mitigate macOS tar bug
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          sudo /usr/sbin/purge
      
      - name: Create archive as release asset - Linux
        id: linux_asset
        if: >
          matrix.target != 'aarch64-apple-darwin' &&
          matrix.target != 'x86_64-pc-windows-msvc'
        run: |
          cd "${{ env.JOB_WORKDIR }}"
          tar czf "../${RELEASE_ASSET_FILENAME}" "${RELEASE_SRC_DIR}"

          RELEASE_ASSET_SHA256=$(sha256sum "../${RELEASE_ASSET_FILENAME}" | awk '{print $1}')
          echo "linux_asset_sha256=${RELEASE_ASSET_SHA256}" >> $GITHUB_OUTPUT
      
      - name: Create archive as release asset - Windows / macOS
        if: >
          matrix.target == 'aarch64-apple-darwin' ||
          matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          cd "${{ env.JOB_WORKDIR }}"
          7z a "../${RELEASE_ASSET_FILENAME}" "${RELEASE_SRC_DIR}"
      
      - name: Update release with new asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} ${RELEASE_ASSET_FILENAME}

  # [ packaging ]
  # - archlinux
  archlinux-aur-publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH setup
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur_key
          chmod 600 ~/.ssh/aur_key
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo -e "Host aur.archlinux.org\n  User aur\n  IdentityFile ~/.ssh/aur_key\n  StrictHostKeyChecking yes\n  LogLevel ERROR" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
      
      - name: AUR repository git clone
        env:
          AUR_REPO_URL: "ssh://aur@aur.archlinux.org/${{ env.PRODUCT_BASENAME }}.git"
          AUR_DIR: "aur-repo-${{ github.run_id }}"
        run: |
          git clone "${AUR_REPO_URL}" "${AUR_DIR}"
          echo "AUR_DIR=${AUR_DIR}" >> $GITHUB_ENV
      
      - name: PKGBUILD modify
        working-directory: "${{ env.AUR_DIR }}"
        run: |
          sed -i "s/^pkgname=.*/pkgname=${{ env.PRODUCT_BASENAME }}/" PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=${{ github.ref_name }}/" PKGBUILD
          sed -i "s/^sha256sums=(.*)/sha256sums=('${{ needs.build.outputs.linux_asset_sha256 }}')/" PKGBUILD
      
      - name: .desktop modify and icon prepare
        working-directory: "${{ env.AUR_DIR }}"
        run: |
          sed -i "s/^Name=.*/Name=${{ env.PRODUCT_BASENAME }}/" PKGBUILD
          sed -i "s/^Exec=.*/Exec=${{ env.PRODUCT_BASENAME }}/" PKGBUILD
          sed -i "s/^Version=.*/Version=${{ github.ref_name }}/" PKGBUILD
          sed -i "s/^Icon=.*/Icon=${{ env.PRODUCT_BASENAME }}.png/" PKGBUILD
          cp ../../../docs/.assets/logo.png ${{ env.PRODUCT_BASENAME }}.png
      
      - name: Docker image cache
        uses: actions/cache@v4
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('PKGBUILD') }}
          restore-keys: |
            ${{ runner.os }}-docker-
      
      - name: .SRCINFO modify
        working-directory: "${{ env.AUR_DIR }}"
        run: |
          docker run --rm \
            -v "$(pwd)":/src \
            archlinux:latest bash -c " \
              useradd -m builduser && \
              chown -R builduser:builduser /src && \
              su - builduser -c 'cd /src && makepkg --printsrcinfo > .SRCINFO' \
            "
          sudo chown -R "$(id -u):$(id -g)" .
      
      - name: AUR repository git commit and push
        working-directory: "${{ env.AUR_DIR }}"
        run: |
          if ! git diff --quiet --exit-code; then
            git config user.email "${{ secrets.AUR_EMAIL }}"
            git config user.name "GitHub Actions AUR Updater"
            
            git add PKGBUILD .SRCINFO
            git commit -m "${{ github.ref_name }}: new release update"

            git push
            echo "successfully pushed updates to AUR."
          else
            echo "no changes detected for AUR, skipping."
          fi
      
      - name: SSH clean up
        if: always()
        run: |
          rm -f ~/.ssh/aur_key
          rm -f ~/.ssh/known_hosts
